name: ðŸ“ˆã€€Benchmark

on:
  workflow_dispatch:
    inputs:
      warmups:
        description: 'Amount of gradle daemon warmups to perform prior to benchmarking'
        required: true
        default: '4'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
      iterations:
        description: 'Amount of benchmark iterations'
        required: true
        default: '15'
        type: choice
        options:
          - '1'
          - '5'
          - '10'
          - '15'
      scenarios:
        description: 'Optional: Scenarios to run (Separate each by space), defaults to "default-scenarios" in benchmark.scenarios'
        required: false
        default: 'assembleWithBuildCache'
        type: string

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      task-matrix: ${{ steps.generate_matrix.outputs.result }}
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: Generate Matrix
        id: generate_matrix
        uses: actions/github-script@v6
        with:
          script: |
            const tasks = '${{ github.event.inputs.scenarios }}'
            return tasks.split(' ')

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

  benchmark-master:
    needs: [setup]
    uses: ./.github/workflows/benchmark_branch.yml
    strategy:
      matrix:
        task: ${{ fromJSON(needs.setup.outputs.task-matrix) }}
    with:
      runner: ubuntu-latest
      branch: master
      scenario: ${{ matrix.task }}
      warmups: ${{ github.event.inputs.warmups }}
      iterations: ${{ github.event.inputs.iterations }}
      read_only_cache: false

  benchmark-pr:
    needs: [ setup ]
    uses: ./.github/workflows/benchmark_branch.yml
    strategy:
      matrix:
        task: ${{ fromJSON(needs.setup.outputs.task-matrix) }}
    with:
      runner: buildjet-2vcpu-ubuntu-2204
      branch: ${{ needs.setup.outputs.branch }}
      scenario: ${{ matrix.task }}
      warmups: ${{ github.event.inputs.warmups }}
      iterations: ${{ github.event.inputs.iterations }}

  collate-benchmarks:
    runs-on: ubuntu-latest
    needs: [setup, benchmark-master, benchmark-pr]
    steps:

      - name: Find Pull Request ID
        uses: juliangruber/find-pull-request-action@v1
        id: pr-id
        with:
          branch: ${{ needs.setup.outputs.branch }}

      - name: Download all the uploaded artifacts
        uses: actions/download-artifact@v3
        with:
          path: results

      - name: Aggregate results
        run: |
          awk -F, -v OFS="," '{a[FNR] = (FNR==NR ? $0 : a[FNR] OFS $2)}END { for(i=1;i<=FNR;i++) print a[i]}' results/master-results/*.csv > master-results.csv
          awk -F, -v OFS="," '{a[FNR] = (FNR==NR ? $0 : a[FNR] OFS $2)}END { for(i=1;i<=FNR;i++) print a[i]}' results/${{ needs.setup.outputs.branch }}-results/*.csv > pr-results.csv

      - name: Read master csv
        id: master-csv
        uses: juliangruber/read-file-action@v1
        with:
          path: ./master-results.csv

      - name: Read pr csv
        id: pr-csv
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pr-results.csv

      - name: Convert CSV to Markdown
        uses: petems/csv-to-md-table-action@v1.0.0
        id: master-table-output
        with:
          csvinput: ${{ steps.master-csv.outputs.content }}

      - name: Convert CSV to Markdown
        uses: petems/csv-to-md-table-action@v1.0.0
        id: pr-table-output
        with:
          csvinput: ${{ steps.pr-csv.outputs.content }}

      - name: Comment with results
        if: steps.pr-id.outputs.number != ''
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.pr-id.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
            ### Master Benchmark
            ${{steps.master-table-output.outputs.markdown-table}}
            ### PR Benchmark
            ${{steps.pr-table-output.outputs.markdown-table}}
            ### Artifacts
            Artifacts associated with this benchmark can be found [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `
            })